{"version":3,"file":"index.js","mappings":"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","sources":["webpack://grapesjs-custom-code/webpack/universalModuleDefinition","webpack://grapesjs-custom-code/webpack/bootstrap","webpack://grapesjs-custom-code/webpack/runtime/define property getters","webpack://grapesjs-custom-code/webpack/runtime/hasOwnProperty shorthand","webpack://grapesjs-custom-code/webpack/runtime/make namespace object","webpack://grapesjs-custom-code/./src/utils.ts","webpack://grapesjs-custom-code/./src/index.ts","webpack://grapesjs-custom-code/./src/components.ts","webpack://grapesjs-custom-code/./src/blocks.ts","webpack://grapesjs-custom-code/./src/commands.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-custom-code\"] = factory();\n\telse\n\t\troot[\"grapesjs-custom-code\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const keyCustomCode = 'custom-code-plugin__code';\nexport const typeCustomCode = 'custom-code';\nexport const commandNameCustomCode = 'custom-code:open-modal';","import type { BlockProperties, ComponentDefinition, Plugin } from 'grapesjs';\nimport loadBlocks from './blocks';\nimport loadCommands from './commands';\nimport loadComponents from './components';\n\nexport type PluginOptions = {\n  /**\n   * Object to extend the default custom code block. Pass a falsy value to avoid adding the block\n   * @example\n   * { label: 'Custom Code', category: 'Extra', ... }\n   */\n   blockCustomCode?: Partial<BlockProperties>;\n\n  /**\n   * Object to extend the default custom code properties.\n   * @example\n   * { name: 'Custom Code', droppable: false, ... }\n   */\n   propsCustomCode?: ComponentDefinition;\n\n  /**\n   * Object to extend the default component's toolbar button for the code. Pass a falsy value to avoid adding the button\n   * @example\n   * { label: '</>', attributes: { title: 'Open custom code' } }\n   */\n   toolbarBtnCustomCode?: Record<string, any>;\n\n   /**\n    * Content to show when the custom code contains `<script>`\n    */\n   placeholderScript?: string;\n\n   /**\n    * Title for the custom code modal\n    * @default 'Insert your code'\n    */\n   modalTitle?: string;\n\n   /**\n    * Additional options for the code viewer.\n    * @example\n    * { theme: 'hopscotch', readOnly: 0 }\n    */\n   codeViewOptions?: Record<string, any>;\n\n   /**\n    * Label for the default save button\n    * @default 'Save'\n    */\n    buttonLabel?: string;\n\n    /**\n     * Object to extend the default custom code command.\n     */\n    commandCustomCode?: Record<string, any>;\n};\n\nconst plugin: Plugin<PluginOptions> = (editor, opts = {}) => {\n  const options: PluginOptions = {\n    blockCustomCode: {},\n    propsCustomCode: {},\n    toolbarBtnCustomCode: {},\n    placeholderScript: `<div style=\"pointer-events: none; padding: 10px;\">\n      <svg viewBox=\"0 0 24 24\" style=\"height: 30px; vertical-align: middle;\">\n        <path d=\"M13 14h-2v-4h2m0 8h-2v-2h2M1 21h22L12 2 1 21z\"></path>\n        </svg>\n      Custom code with <i>&lt;script&gt;</i> can't be rendered on the canvas\n    </div>`,\n    modalTitle: 'Insert your code',\n    codeViewOptions: {},\n    buttonLabel: 'Save',\n    commandCustomCode: {},\n    ...opts\n  };\n\n  // Add components\n  loadComponents(editor, options);\n\n  // Add blocks\n  loadBlocks(editor, options);\n\n  // Add commands\n  loadCommands(editor, options);\n};\n\nexport default plugin;\n","import type { Editor } from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { keyCustomCode, commandNameCustomCode, typeCustomCode } from './utils';\n\nexport default (editor: Editor, opts: PluginOptions = {}) => {\n  const { Components } = editor;\n  const { toolbarBtnCustomCode } = opts;\n  let timedInterval: NodeJS.Timeout;\n\n  Components.addType('script', {\n    view: {\n      onRender() {\n        const { model, el } = this;\n        const isCC = model.closestType(typeCustomCode);\n        isCC && (el.innerHTML = '');\n      }\n    },\n  });\n\n  Components.addType(typeCustomCode, {\n    model: {\n      defaults: {\n        name: 'Custom Code',\n        editable: true,\n        components: {\n          tagName: 'span',\n          components: { type: 'textnode', content: 'Insert here your custom code' }\n        } as any,\n        ...opts.propsCustomCode,\n      },\n\n      /**\n       * Initilize the component\n       */\n      init() {\n        this.on(`change:${keyCustomCode}`, this.onCustomCodeChange);\n        const initialCode = this.get(keyCustomCode);\n        !this.components().length && this.components(initialCode);\n        const toolbar = this.get('toolbar')!;\n        const id = 'custom-code';\n\n        // Add the custom code toolbar button if requested and it's not already in\n        if (toolbarBtnCustomCode && !toolbar.filter(tlb => tlb.id === id ).length) {\n          toolbar.unshift({\n            id,\n            command: commandNameCustomCode,\n            label: `<svg viewBox=\"0 0 24 24\">\n              <path d=\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\"></path>\n            </svg>`,\n            ...toolbarBtnCustomCode\n          });\n        }\n      },\n\n      /**\n       * Callback to launch on keyCustomCode change\n       */\n      onCustomCodeChange() {\n        this.components(this.get(keyCustomCode));\n      },\n    },\n\n    view: {\n      events: {\n        dblclick: 'onActive',\n      } as any,\n\n      init() {\n        this.listenTo(this.model.components(), 'add remove reset', this.onComponentsChange);\n        this.onComponentsChange();\n      },\n\n      /**\n       * Things to do once inner components of custom code are changed\n       */\n      onComponentsChange() {\n        timedInterval && clearInterval(timedInterval);\n        timedInterval = setTimeout(() => {\n          const { model, el } = this;\n          const content = model.get(keyCustomCode) || '';\n          let droppable = true;\n\n          // Avoid rendering codes with scripts\n          if (content.indexOf('<script') >= 0 && opts.placeholderScript) {\n            el.innerHTML = opts.placeholderScript;\n            droppable = false;\n          }\n\n          model.set({ droppable });\n        }, 0);\n      },\n\n      onActive() {\n        const { model, em } = this;\n        em.get('Commands').run(commandNameCustomCode, { target: model });\n      },\n    },\n  });\n}\n","import type { Editor } from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { typeCustomCode } from './utils';\n\nexport default (editor: Editor, { blockCustomCode }: PluginOptions = {}) => {\n  const { Blocks } = editor;\n\n  blockCustomCode && Blocks.add(typeCustomCode, {\n    label: 'Custom Code',\n    media: `\n      <svg viewBox=\"0 0 24 24\">\n        <path d=\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\"></path>\n      </svg>\n    `,\n    category: 'Extra',\n    activate: true,\n    select: true,\n    content: { type: typeCustomCode },\n    ...blockCustomCode\n  });\n}\n","import type { Editor, Component } from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { commandNameCustomCode, keyCustomCode } from './utils';\n\ntype ContentTypes = HTMLElement | string | undefined;\n\nexport default (editor: Editor, opts: PluginOptions = {}) => {\n  const { modalTitle, codeViewOptions, commandCustomCode } = opts;\n\n  const appendToContent = (target: HTMLElement, content?: ContentTypes) => {\n    if (content instanceof HTMLElement) {\n        target.appendChild(content);\n    } else if (content) {\n        target.insertAdjacentHTML('beforeend', content);\n    }\n  }\n\n  // Add the custom code command\n  editor.Commands.add(commandNameCustomCode, {\n    keyCustomCode,\n    target: null as null | Component,\n    codeViewer: null as any,\n\n    run(editor, s, opts = {}) {\n      const target = opts.target || editor.getSelected();\n      this.target = target;\n\n      if (target?.get('editable')) {\n        this.showCustomCode(target, opts);\n      }\n    },\n\n    stop(editor) {\n      editor.Modal.close();\n    },\n\n    /**\n     * Method which tells how to show the custom code\n     * @param  {Component} target\n     */\n    showCustomCode(target: Component, options: any) {\n      const title = options.title || modalTitle;\n      const code = target.get(keyCustomCode) || '';\n      const content = this.getContent();\n      editor.Modal\n        .open({ title, content })\n        .onceClose(() => editor.stopCommand(commandNameCustomCode))\n      this.getCodeViewer().setContent(code);\n    },\n\n    /**\n     * Custom pre-content. Can be a simple string or an HTMLElement\n     */\n    getPreContent() {},\n\n    /**\n     * Custom post-content. Can be a simple string or an HTMLElement\n     */\n    getPostContent() {},\n\n    /**\n     * Get all the content for the custom code\n     * @return {HTMLElement}\n     */\n    getContent() {\n      const codeViewer = this.getCodeViewer();\n      const content = document.createElement('div');\n      const pfx = editor.getConfig('stylePrefix');\n      content.className = `${pfx}custom-code`;\n      appendToContent(content, this.getPreContent() as ContentTypes);\n      content.appendChild(codeViewer.getElement());\n      appendToContent(content, this.getPostContent() as ContentTypes);\n      appendToContent(content, this.getContentActions());\n      codeViewer.refresh();\n      setTimeout(()=> codeViewer.focus(), 0);\n\n      return content;\n    },\n\n    /**\n     * Get the actions content. Can be a simple string or an HTMLElement\n     * @return {HTMLElement|String}\n     */\n    getContentActions() {\n      const btn = document.createElement('button');\n      btn.setAttribute('type', 'button');\n      const pfx = editor.getConfig('stylePrefix');\n      btn.innerHTML = opts.buttonLabel!;\n      btn.className = `${pfx}btn-prim ${pfx}btn-import__custom-code`;\n      btn.onclick = () => this.handleSave();\n\n      return btn;\n    },\n\n    /**\n     * Handle the main save task\n     */\n    handleSave() {\n      const { target } = this;\n      const code = this.getCodeViewer().getContent();\n      target?.set(keyCustomCode, code);\n      editor.Modal.close();\n    },\n\n    /**\n     * Return the code viewer instance\n     * @return {CodeViewer}\n     */\n    getCodeViewer() {\n      if (!this.codeViewer) {\n        this.codeViewer = editor.CodeManager.createViewer({\n          codeName: 'htmlmixed',\n          theme: 'hopscotch',\n          readOnly: 0,\n          ...codeViewOptions,\n        });\n      }\n      return this.codeViewer;\n    },\n\n    ...commandCustomCode,\n  });\n};\n"],"names":["root","factory","exports","module","define","amd","globalThis","window","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","keyCustomCode","typeCustomCode","commandNameCustomCode","editor","opts","options","blockCustomCode","propsCustomCode","toolbarBtnCustomCode","placeholderScript","modalTitle","codeViewOptions","buttonLabel","commandCustomCode","timedInterval","Components","addType","view","onRender","model","el","closestType","innerHTML","defaults","name","editable","components","tagName","type","content","init","on","onCustomCodeChange","initialCode","length","toolbar","id","filter","tlb","unshift","command","label","events","dblclick","listenTo","onComponentsChange","clearInterval","setTimeout","droppable","indexOf","set","onActive","run","target","Blocks","add","media","category","activate","select","appendToContent","HTMLElement","appendChild","insertAdjacentHTML","Commands","codeViewer","s","getSelected","showCustomCode","stop","Modal","close","title","code","getContent","open","onceClose","stopCommand","getCodeViewer","setContent","getPreContent","getPostContent","document","createElement","pfx","getConfig","className","getElement","getContentActions","refresh","focus","btn","setAttribute","onclick","handleSave","CodeManager","createViewer","codeName","theme","readOnly"],"sourceRoot":""}