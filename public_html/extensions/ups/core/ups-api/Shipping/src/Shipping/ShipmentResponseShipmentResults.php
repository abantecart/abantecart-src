<?php
/**
 * ShipmentResponseShipmentResults
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\Shipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ship
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\Shipping\Shipping;

use \ArrayAccess;
use \UPS\Shipping\ObjectSerializer;

/**
 * ShipmentResponseShipmentResults Class Doc Comment
 *
 * @category Class
 * @description Shipment Results container.
 * @package  UPS\Shipping
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentResponseShipmentResults implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentResponse_ShipmentResults';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'disclaimer' => '\UPS\Shipping\Shipping\ShipmentResultsDisclaimer[]',
        'shipment_charges' => '\UPS\Shipping\Shipping\ShipmentResultsShipmentCharges',
        'negotiated_rate_charges' => '\UPS\Shipping\Shipping\ShipmentResultsNegotiatedRateCharges',
        'frs_shipment_data' => '\UPS\Shipping\Shipping\ShipmentResultsFRSShipmentData',
        'rating_method' => 'string',
        'billable_weight_calculation_method' => 'string',
        'billing_weight' => '\UPS\Shipping\Shipping\ShipmentResultsBillingWeight',
        'shipment_identification_number' => 'string',
        'mi_dual_return_shipment_key' => 'string',
        'bar_code_image' => 'string',
        'package_results' => '\UPS\Shipping\Shipping\ShipmentResultsPackageResults[]',
        'control_log_receipt' => '\UPS\Shipping\Shipping\ShipmentResultsControlLogReceipt[]',
        'form' => '\UPS\Shipping\Shipping\ShipmentResultsForm',
        'cod_turn_in_page' => '\UPS\Shipping\Shipping\ShipmentResultsCODTurnInPage',
        'high_value_report' => '\UPS\Shipping\Shipping\ShipmentResultsHighValueReport',
        'label_url' => 'string',
        'local_language_label_url' => 'string',
        'receipt_url' => 'string',
        'local_language_receipt_url' => 'string',
        'dg_paper_image' => 'string[]',
        'master_carton_id' => 'string',
        'roar_rated_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'disclaimer' => null,
        'shipment_charges' => null,
        'negotiated_rate_charges' => null,
        'frs_shipment_data' => null,
        'rating_method' => null,
        'billable_weight_calculation_method' => null,
        'billing_weight' => null,
        'shipment_identification_number' => null,
        'mi_dual_return_shipment_key' => null,
        'bar_code_image' => null,
        'package_results' => null,
        'control_log_receipt' => null,
        'form' => null,
        'cod_turn_in_page' => null,
        'high_value_report' => null,
        'label_url' => null,
        'local_language_label_url' => null,
        'receipt_url' => null,
        'local_language_receipt_url' => null,
        'dg_paper_image' => null,
        'master_carton_id' => null,
        'roar_rated_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disclaimer' => 'Disclaimer',
        'shipment_charges' => 'ShipmentCharges',
        'negotiated_rate_charges' => 'NegotiatedRateCharges',
        'frs_shipment_data' => 'FRSShipmentData',
        'rating_method' => 'RatingMethod',
        'billable_weight_calculation_method' => 'BillableWeightCalculationMethod',
        'billing_weight' => 'BillingWeight',
        'shipment_identification_number' => 'ShipmentIdentificationNumber',
        'mi_dual_return_shipment_key' => 'MIDualReturnShipmentKey',
        'bar_code_image' => 'BarCodeImage',
        'package_results' => 'PackageResults',
        'control_log_receipt' => 'ControlLogReceipt',
        'form' => 'Form',
        'cod_turn_in_page' => 'CODTurnInPage',
        'high_value_report' => 'HighValueReport',
        'label_url' => 'LabelURL',
        'local_language_label_url' => 'LocalLanguageLabelURL',
        'receipt_url' => 'ReceiptURL',
        'local_language_receipt_url' => 'LocalLanguageReceiptURL',
        'dg_paper_image' => 'DGPaperImage',
        'master_carton_id' => 'MasterCartonID',
        'roar_rated_indicator' => 'RoarRatedIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disclaimer' => 'setDisclaimer',
        'shipment_charges' => 'setShipmentCharges',
        'negotiated_rate_charges' => 'setNegotiatedRateCharges',
        'frs_shipment_data' => 'setFrsShipmentData',
        'rating_method' => 'setRatingMethod',
        'billable_weight_calculation_method' => 'setBillableWeightCalculationMethod',
        'billing_weight' => 'setBillingWeight',
        'shipment_identification_number' => 'setShipmentIdentificationNumber',
        'mi_dual_return_shipment_key' => 'setMiDualReturnShipmentKey',
        'bar_code_image' => 'setBarCodeImage',
        'package_results' => 'setPackageResults',
        'control_log_receipt' => 'setControlLogReceipt',
        'form' => 'setForm',
        'cod_turn_in_page' => 'setCodTurnInPage',
        'high_value_report' => 'setHighValueReport',
        'label_url' => 'setLabelUrl',
        'local_language_label_url' => 'setLocalLanguageLabelUrl',
        'receipt_url' => 'setReceiptUrl',
        'local_language_receipt_url' => 'setLocalLanguageReceiptUrl',
        'dg_paper_image' => 'setDgPaperImage',
        'master_carton_id' => 'setMasterCartonId',
        'roar_rated_indicator' => 'setRoarRatedIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disclaimer' => 'getDisclaimer',
        'shipment_charges' => 'getShipmentCharges',
        'negotiated_rate_charges' => 'getNegotiatedRateCharges',
        'frs_shipment_data' => 'getFrsShipmentData',
        'rating_method' => 'getRatingMethod',
        'billable_weight_calculation_method' => 'getBillableWeightCalculationMethod',
        'billing_weight' => 'getBillingWeight',
        'shipment_identification_number' => 'getShipmentIdentificationNumber',
        'mi_dual_return_shipment_key' => 'getMiDualReturnShipmentKey',
        'bar_code_image' => 'getBarCodeImage',
        'package_results' => 'getPackageResults',
        'control_log_receipt' => 'getControlLogReceipt',
        'form' => 'getForm',
        'cod_turn_in_page' => 'getCodTurnInPage',
        'high_value_report' => 'getHighValueReport',
        'label_url' => 'getLabelUrl',
        'local_language_label_url' => 'getLocalLanguageLabelUrl',
        'receipt_url' => 'getReceiptUrl',
        'local_language_receipt_url' => 'getLocalLanguageReceiptUrl',
        'dg_paper_image' => 'getDgPaperImage',
        'master_carton_id' => 'getMasterCartonId',
        'roar_rated_indicator' => 'getRoarRatedIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disclaimer'] = isset($data['disclaimer']) ? $data['disclaimer'] : null;
        $this->container['shipment_charges'] = isset($data['shipment_charges']) ? $data['shipment_charges'] : null;
        $this->container['negotiated_rate_charges'] = isset($data['negotiated_rate_charges']) ? $data['negotiated_rate_charges'] : null;
        $this->container['frs_shipment_data'] = isset($data['frs_shipment_data']) ? $data['frs_shipment_data'] : null;
        $this->container['rating_method'] = isset($data['rating_method']) ? $data['rating_method'] : null;
        $this->container['billable_weight_calculation_method'] = isset($data['billable_weight_calculation_method']) ? $data['billable_weight_calculation_method'] : null;
        $this->container['billing_weight'] = isset($data['billing_weight']) ? $data['billing_weight'] : null;
        $this->container['shipment_identification_number'] = isset($data['shipment_identification_number']) ? $data['shipment_identification_number'] : null;
        $this->container['mi_dual_return_shipment_key'] = isset($data['mi_dual_return_shipment_key']) ? $data['mi_dual_return_shipment_key'] : null;
        $this->container['bar_code_image'] = isset($data['bar_code_image']) ? $data['bar_code_image'] : null;
        $this->container['package_results'] = isset($data['package_results']) ? $data['package_results'] : null;
        $this->container['control_log_receipt'] = isset($data['control_log_receipt']) ? $data['control_log_receipt'] : null;
        $this->container['form'] = isset($data['form']) ? $data['form'] : null;
        $this->container['cod_turn_in_page'] = isset($data['cod_turn_in_page']) ? $data['cod_turn_in_page'] : null;
        $this->container['high_value_report'] = isset($data['high_value_report']) ? $data['high_value_report'] : null;
        $this->container['label_url'] = isset($data['label_url']) ? $data['label_url'] : null;
        $this->container['local_language_label_url'] = isset($data['local_language_label_url']) ? $data['local_language_label_url'] : null;
        $this->container['receipt_url'] = isset($data['receipt_url']) ? $data['receipt_url'] : null;
        $this->container['local_language_receipt_url'] = isset($data['local_language_receipt_url']) ? $data['local_language_receipt_url'] : null;
        $this->container['dg_paper_image'] = isset($data['dg_paper_image']) ? $data['dg_paper_image'] : null;
        $this->container['master_carton_id'] = isset($data['master_carton_id']) ? $data['master_carton_id'] : null;
        $this->container['roar_rated_indicator'] = isset($data['roar_rated_indicator']) ? $data['roar_rated_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billing_weight'] === null) {
            $invalidProperties[] = "'billing_weight' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disclaimer
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsDisclaimer[]
     */
    public function getDisclaimer()
    {
        return $this->container['disclaimer'];
    }

    /**
     * Sets disclaimer
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsDisclaimer[] $disclaimer Disclaimer would be used to provide more information to shipper regarding the processed shipment. This would be used to notify shipper about possible taxes and duties that might have been added or might apply to the shipment. This field would be returned only if TaxInformationIndicator is present in a request.  **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return $this
     */
    public function setDisclaimer($disclaimer)
    {
        $this->container['disclaimer'] = $disclaimer;

        return $this;
    }

    /**
     * Gets shipment_charges
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsShipmentCharges
     */
    public function getShipmentCharges()
    {
        return $this->container['shipment_charges'];
    }

    /**
     * Sets shipment_charges
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsShipmentCharges $shipment_charges shipment_charges
     *
     * @return $this
     */
    public function setShipmentCharges($shipment_charges)
    {
        $this->container['shipment_charges'] = $shipment_charges;

        return $this;
    }

    /**
     * Gets negotiated_rate_charges
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsNegotiatedRateCharges
     */
    public function getNegotiatedRateCharges()
    {
        return $this->container['negotiated_rate_charges'];
    }

    /**
     * Sets negotiated_rate_charges
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsNegotiatedRateCharges $negotiated_rate_charges negotiated_rate_charges
     *
     * @return $this
     */
    public function setNegotiatedRateCharges($negotiated_rate_charges)
    {
        $this->container['negotiated_rate_charges'] = $negotiated_rate_charges;

        return $this;
    }

    /**
     * Gets frs_shipment_data
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsFRSShipmentData
     */
    public function getFrsShipmentData()
    {
        return $this->container['frs_shipment_data'];
    }

    /**
     * Sets frs_shipment_data
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsFRSShipmentData $frs_shipment_data frs_shipment_data
     *
     * @return $this
     */
    public function setFrsShipmentData($frs_shipment_data)
    {
        $this->container['frs_shipment_data'] = $frs_shipment_data;

        return $this;
    }

    /**
     * Gets rating_method
     *
     * @return string
     */
    public function getRatingMethod()
    {
        return $this->container['rating_method'];
    }

    /**
     * Sets rating_method
     *
     * @param string $rating_method RatingMethod is to indicate whether the Shipment was rated as shipment level or package level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Valid values: 01 = Shipment level 02 = Package level
     *
     * @return $this
     */
    public function setRatingMethod($rating_method)
    {
        $this->container['rating_method'] = $rating_method;

        return $this;
    }

    /**
     * Gets billable_weight_calculation_method
     *
     * @return string
     */
    public function getBillableWeightCalculationMethod()
    {
        return $this->container['billable_weight_calculation_method'];
    }

    /**
     * Sets billable_weight_calculation_method
     *
     * @param string $billable_weight_calculation_method BillableWeightCalculationMethod is to indicate whether the billable weight calculation method utilized was - the package level or shipment level. This information will be returned only if RatingMethodRequestedIndicator is present in the request.  Valid values: 01 = Shipment Billable Weight 02 = Package Billable Weight
     *
     * @return $this
     */
    public function setBillableWeightCalculationMethod($billable_weight_calculation_method)
    {
        $this->container['billable_weight_calculation_method'] = $billable_weight_calculation_method;

        return $this;
    }

    /**
     * Gets billing_weight
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsBillingWeight
     */
    public function getBillingWeight()
    {
        return $this->container['billing_weight'];
    }

    /**
     * Sets billing_weight
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsBillingWeight $billing_weight billing_weight
     *
     * @return $this
     */
    public function setBillingWeight($billing_weight)
    {
        $this->container['billing_weight'] = $billing_weight;

        return $this;
    }

    /**
     * Gets shipment_identification_number
     *
     * @return string
     */
    public function getShipmentIdentificationNumber()
    {
        return $this->container['shipment_identification_number'];
    }

    /**
     * Sets shipment_identification_number
     *
     * @param string $shipment_identification_number Returned UPS shipment ID number.1Z Number of the first package in the shipment.
     *
     * @return $this
     */
    public function setShipmentIdentificationNumber($shipment_identification_number)
    {
        $this->container['shipment_identification_number'] = $shipment_identification_number;

        return $this;
    }

    /**
     * Gets mi_dual_return_shipment_key
     *
     * @return string
     */
    public function getMiDualReturnShipmentKey()
    {
        return $this->container['mi_dual_return_shipment_key'];
    }

    /**
     * Sets mi_dual_return_shipment_key
     *
     * @param string $mi_dual_return_shipment_key MIDualReturnShipmentKey is unique key required to process Mail Innovations Dual Return Shipment.   The unique identifier (key) would be returned in response of first phase of Mail Innovations Dual Return Shipments.   This unique identifier (key) would be part of request for second phase of Mail Innovations Dual Return Shipments and would be played back in response for second phase of Mail Innovations Dual Return Shipment.  If the shipment is a Package return shipment, the package tracking number will be concatenated with the system time (in the format YYYY-MM-DDHH.MM.SS.NNN) and followed by service code.   If the shipment is an MI Returns shipment, the Mail Manifest ID (MMI) will be concatenated with the system time.
     *
     * @return $this
     */
    public function setMiDualReturnShipmentKey($mi_dual_return_shipment_key)
    {
        $this->container['mi_dual_return_shipment_key'] = $mi_dual_return_shipment_key;

        return $this;
    }

    /**
     * Gets bar_code_image
     *
     * @return string
     */
    public function getBarCodeImage()
    {
        return $this->container['bar_code_image'];
    }

    /**
     * Sets bar_code_image
     *
     * @param string $bar_code_image Bar Code Image will be returned as Base 64 encoded graphic image. Bar Code Image will be returned if BarCodeImageIndicator or BarCodeAndLabelIndicator is present.
     *
     * @return $this
     */
    public function setBarCodeImage($bar_code_image)
    {
        $this->container['bar_code_image'] = $bar_code_image;

        return $this;
    }

    /**
     * Gets package_results
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsPackageResults[]
     */
    public function getPackageResults()
    {
        return $this->container['package_results'];
    }

    /**
     * Sets package_results
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsPackageResults[] $package_results Returned Package Information.  **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return $this
     */
    public function setPackageResults($package_results)
    {
        $this->container['package_results'] = $package_results;

        return $this;
    }

    /**
     * Gets control_log_receipt
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsControlLogReceipt[]
     */
    public function getControlLogReceipt()
    {
        return $this->container['control_log_receipt'];
    }

    /**
     * Sets control_log_receipt
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsControlLogReceipt[] $control_log_receipt Container for the High Value reports when forward shipments have declared value between $999 and $50,000 USD. \\nTwo copies of high value report needs to be pointed out.  **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return $this
     */
    public function setControlLogReceipt($control_log_receipt)
    {
        $this->container['control_log_receipt'] = $control_log_receipt;

        return $this;
    }

    /**
     * Gets form
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsForm
     */
    public function getForm()
    {
        return $this->container['form'];
    }

    /**
     * Sets form
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsForm $form form
     *
     * @return $this
     */
    public function setForm($form)
    {
        $this->container['form'] = $form;

        return $this;
    }

    /**
     * Gets cod_turn_in_page
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsCODTurnInPage
     */
    public function getCodTurnInPage()
    {
        return $this->container['cod_turn_in_page'];
    }

    /**
     * Sets cod_turn_in_page
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsCODTurnInPage $cod_turn_in_page cod_turn_in_page
     *
     * @return $this
     */
    public function setCodTurnInPage($cod_turn_in_page)
    {
        $this->container['cod_turn_in_page'] = $cod_turn_in_page;

        return $this;
    }

    /**
     * Gets high_value_report
     *
     * @return \UPS\Shipping\Shipping\ShipmentResultsHighValueReport
     */
    public function getHighValueReport()
    {
        return $this->container['high_value_report'];
    }

    /**
     * Sets high_value_report
     *
     * @param \UPS\Shipping\Shipping\ShipmentResultsHighValueReport $high_value_report high_value_report
     *
     * @return $this
     */
    public function setHighValueReport($high_value_report)
    {
        $this->container['high_value_report'] = $high_value_report;

        return $this;
    }

    /**
     * Gets label_url
     *
     * @return string
     */
    public function getLabelUrl()
    {
        return $this->container['label_url'];
    }

    /**
     * Sets label_url
     *
     * @param string $label_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LabelURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.  Forward shipment except for Mail Innovations Forward.
     *
     * @return $this
     */
    public function setLabelUrl($label_url)
    {
        $this->container['label_url'] = $label_url;

        return $this;
    }

    /**
     * Gets local_language_label_url
     *
     * @return string
     */
    public function getLocalLanguageLabelUrl()
    {
        return $this->container['local_language_label_url'];
    }

    /**
     * Sets local_language_label_url
     *
     * @param string $local_language_label_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LocalLanguageLabelURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.  Forward shipment except for Mail Innovations Forward.  Not returned if LabelLinksIndicator is requested with Locale element.
     *
     * @return $this
     */
    public function setLocalLanguageLabelUrl($local_language_label_url)
    {
        $this->container['local_language_label_url'] = $local_language_label_url;

        return $this;
    }

    /**
     * Gets receipt_url
     *
     * @return string
     */
    public function getReceiptUrl()
    {
        return $this->container['receipt_url'];
    }

    /**
     * Sets receipt_url
     *
     * @param string $receipt_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. ReceiptURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.
     *
     * @return $this
     */
    public function setReceiptUrl($receipt_url)
    {
        $this->container['receipt_url'] = $receipt_url;

        return $this;
    }

    /**
     * Gets local_language_receipt_url
     *
     * @return string
     */
    public function getLocalLanguageReceiptUrl()
    {
        return $this->container['local_language_receipt_url'];
    }

    /**
     * Sets local_language_receipt_url
     *
     * @param string $local_language_receipt_url URL will point to a page wherein label, receipt and other documents, if applicable, such as HighValueReport, CustomsInvoice and ImportControl instructions can be requested. LocalLanguageReceiptURL is returned only if the LabelLinksIndicator is requested for following shipments: Print/Electronic ImportControl shipment Print/Electronic Return shipment.   Not returned if LabelLinksIndicator is requested with Locale element.
     *
     * @return $this
     */
    public function setLocalLanguageReceiptUrl($local_language_receipt_url)
    {
        $this->container['local_language_receipt_url'] = $local_language_receipt_url;

        return $this;
    }

    /**
     * Gets dg_paper_image
     *
     * @return string[]
     */
    public function getDgPaperImage()
    {
        return $this->container['dg_paper_image'];
    }

    /**
     * Sets dg_paper_image
     *
     * @param string[] $dg_paper_image Dangerous Good Paper Image in pdf format. One multipage PDF document will be returned that will contain all required Dangrous Goods shipping paper copies for all Dangerous Goods packages. Only returned when DGSignatoryInfo is present.  **NOTE:** For versions >= v2403, this element will always be returned as an array. For requests using versions < v2403, this element will be returned as an array if there is more than one object and a single object if there is only 1.
     *
     * @return $this
     */
    public function setDgPaperImage($dg_paper_image)
    {
        $this->container['dg_paper_image'] = $dg_paper_image;

        return $this;
    }

    /**
     * Gets master_carton_id
     *
     * @return string
     */
    public function getMasterCartonId()
    {
        return $this->container['master_carton_id'];
    }

    /**
     * Sets master_carton_id
     *
     * @param string $master_carton_id Master Carton ID. MasterCartonID will be return if MasterCartonIndicator is present in request.
     *
     * @return $this
     */
    public function setMasterCartonId($master_carton_id)
    {
        $this->container['master_carton_id'] = $master_carton_id;

        return $this;
    }

    /**
     * Gets roar_rated_indicator
     *
     * @return string
     */
    public function getRoarRatedIndicator()
    {
        return $this->container['roar_rated_indicator'];
    }

    /**
     * Sets roar_rated_indicator
     *
     * @param string $roar_rated_indicator Informational only
     *
     * @return $this
     */
    public function setRoarRatedIndicator($roar_rated_indicator)
    {
        $this->container['roar_rated_indicator'] = $roar_rated_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
