<?php
/**
 * SearchResultsGeocodeCandidate
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\Locator
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Locator
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\Locator\Locator;

use \ArrayAccess;
use \UPS\Locator\ObjectSerializer;

/**
 * SearchResultsGeocodeCandidate Class Doc Comment
 *
 * @category Class
 * @package  UPS\Locator
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchResultsGeocodeCandidate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchResults_GeocodeCandidate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address_key_format' => '\UPS\Locator\Locator\GeocodeCandidateAddressKeyFormat',
        'geocode' => '\UPS\Locator\Locator\GeocodeCandidateGeocode',
        'landmark_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address_key_format' => null,
        'geocode' => null,
        'landmark_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_key_format' => 'AddressKeyFormat',
        'geocode' => 'Geocode',
        'landmark_name' => 'LandmarkName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_key_format' => 'setAddressKeyFormat',
        'geocode' => 'setGeocode',
        'landmark_name' => 'setLandmarkName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_key_format' => 'getAddressKeyFormat',
        'geocode' => 'getGeocode',
        'landmark_name' => 'getLandmarkName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address_key_format'] = isset($data['address_key_format']) ? $data['address_key_format'] : null;
        $this->container['geocode'] = isset($data['geocode']) ? $data['geocode'] : null;
        $this->container['landmark_name'] = isset($data['landmark_name']) ? $data['landmark_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address_key_format'] === null) {
            $invalidProperties[] = "'address_key_format' can't be null";
        }
        if ($this->container['geocode'] === null) {
            $invalidProperties[] = "'geocode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_key_format
     *
     * @return \UPS\Locator\Locator\GeocodeCandidateAddressKeyFormat
     */
    public function getAddressKeyFormat()
    {
        return $this->container['address_key_format'];
    }

    /**
     * Sets address_key_format
     *
     * @param \UPS\Locator\Locator\GeocodeCandidateAddressKeyFormat $address_key_format address_key_format
     *
     * @return $this
     */
    public function setAddressKeyFormat($address_key_format)
    {
        $this->container['address_key_format'] = $address_key_format;

        return $this;
    }

    /**
     * Gets geocode
     *
     * @return \UPS\Locator\Locator\GeocodeCandidateGeocode
     */
    public function getGeocode()
    {
        return $this->container['geocode'];
    }

    /**
     * Sets geocode
     *
     * @param \UPS\Locator\Locator\GeocodeCandidateGeocode $geocode geocode
     *
     * @return $this
     */
    public function setGeocode($geocode)
    {
        $this->container['geocode'] = $geocode;

        return $this;
    }

    /**
     * Gets landmark_name
     *
     * @return string
     */
    public function getLandmarkName()
    {
        return $this->container['landmark_name'];
    }

    /**
     * Sets landmark_name
     *
     * @param string $landmark_name If a Landmark code was provided in the request, a candidate list of Landmark Names will be returned along with the corresponding address and Geocode.
     *
     * @return $this
     */
    public function setLandmarkName($landmark_name)
    {
        $this->container['landmark_name'] = $landmark_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
