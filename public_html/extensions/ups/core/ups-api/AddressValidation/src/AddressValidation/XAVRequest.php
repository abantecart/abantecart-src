<?php
/**
 * XAVRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\AddressValidation
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Address Validation - Street Level
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\AddressValidation\AddressValidation;

use \ArrayAccess;
use \UPS\AddressValidation\ObjectSerializer;

/**
 * XAVRequest Class Doc Comment
 *
 * @category Class
 * @package  UPS\AddressValidation
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class XAVRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'XAVRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request' => '\UPS\AddressValidation\AddressValidation\XAVRequestRequest',
        'regional_request_indicator' => 'string',
        'maximum_candidate_list_size' => 'string',
        'address_key_format' => '\UPS\AddressValidation\AddressValidation\XAVRequestAddressKeyFormat'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request' => null,
        'regional_request_indicator' => null,
        'maximum_candidate_list_size' => null,
        'address_key_format' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request' => 'Request',
        'regional_request_indicator' => 'RegionalRequestIndicator',
        'maximum_candidate_list_size' => 'MaximumCandidateListSize',
        'address_key_format' => 'AddressKeyFormat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request' => 'setRequest',
        'regional_request_indicator' => 'setRegionalRequestIndicator',
        'maximum_candidate_list_size' => 'setMaximumCandidateListSize',
        'address_key_format' => 'setAddressKeyFormat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request' => 'getRequest',
        'regional_request_indicator' => 'getRegionalRequestIndicator',
        'maximum_candidate_list_size' => 'getMaximumCandidateListSize',
        'address_key_format' => 'getAddressKeyFormat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request'] = isset($data['request']) ? $data['request'] : null;
        $this->container['regional_request_indicator'] = isset($data['regional_request_indicator']) ? $data['regional_request_indicator'] : null;
        $this->container['maximum_candidate_list_size'] = isset($data['maximum_candidate_list_size']) ? $data['maximum_candidate_list_size'] : null;
        $this->container['address_key_format'] = isset($data['address_key_format']) ? $data['address_key_format'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request'] === null) {
            $invalidProperties[] = "'request' can't be null";
        }
        if ($this->container['address_key_format'] === null) {
            $invalidProperties[] = "'address_key_format' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request
     *
     * @return \UPS\AddressValidation\AddressValidation\XAVRequestRequest
     */
    public function getRequest()
    {
        return $this->container['request'];
    }

    /**
     * Sets request
     *
     * @param \UPS\AddressValidation\AddressValidation\XAVRequestRequest $request request
     *
     * @return $this
     */
    public function setRequest($request)
    {
        $this->container['request'] = $request;

        return $this;
    }

    /**
     * Gets regional_request_indicator
     *
     * @return string
     */
    public function getRegionalRequestIndicator()
    {
        return $this->container['regional_request_indicator'];
    }

    /**
     * Sets regional_request_indicator
     *
     * @param string $regional_request_indicator If this indicator is present then either the region element or any combination of Political Division 1, Political Division 2, PostcodePrimaryLow and the PostcodeExtendedLow fields will be recognized for validation in addition to the urbanization element.  If this tag is present, US and PR street level address validation will not occur. The default is to provide street level address validation.  Not valid with the address classification request option.
     *
     * @return $this
     */
    public function setRegionalRequestIndicator($regional_request_indicator)
    {
        $this->container['regional_request_indicator'] = $regional_request_indicator;

        return $this;
    }

    /**
     * Gets maximum_candidate_list_size
     *
     * @return string
     */
    public function getMaximumCandidateListSize()
    {
        return $this->container['maximum_candidate_list_size'];
    }

    /**
     * Sets maximum_candidate_list_size
     *
     * @param string $maximum_candidate_list_size The maximum number of Candidates to return for this request.  - Valid values: 0 - 50 - Default: 15
     *
     * @return $this
     */
    public function setMaximumCandidateListSize($maximum_candidate_list_size)
    {
        $this->container['maximum_candidate_list_size'] = $maximum_candidate_list_size;

        return $this;
    }

    /**
     * Gets address_key_format
     *
     * @return \UPS\AddressValidation\AddressValidation\XAVRequestAddressKeyFormat
     */
    public function getAddressKeyFormat()
    {
        return $this->container['address_key_format'];
    }

    /**
     * Sets address_key_format
     *
     * @param \UPS\AddressValidation\AddressValidation\XAVRequestAddressKeyFormat $address_key_format address_key_format
     *
     * @return $this
     */
    public function setAddressKeyFormat($address_key_format)
    {
        $this->container['address_key_format'] = $address_key_format;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
