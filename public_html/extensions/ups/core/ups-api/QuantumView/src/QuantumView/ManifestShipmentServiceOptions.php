<?php
/**
 * ManifestShipmentServiceOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\QuantumView
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Quantum View
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\QuantumView\QuantumView;

use \ArrayAccess;
use \UPS\QuantumView\ObjectSerializer;

/**
 * ManifestShipmentServiceOptions Class Doc Comment
 *
 * @category Class
 * @description Container tag for optional UPS services related to a shipment.
 * @package  UPS\QuantumView
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManifestShipmentServiceOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Manifest_ShipmentServiceOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'saturday_pickup' => 'string',
        'saturday_delivery' => 'string',
        'call_tag_ars' => '\UPS\QuantumView\QuantumView\ShipmentServiceOptionsCallTagARS'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'saturday_pickup' => null,
        'saturday_delivery' => null,
        'call_tag_ars' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'saturday_pickup' => 'SaturdayPickup',
        'saturday_delivery' => 'SaturdayDelivery',
        'call_tag_ars' => 'CallTagARS'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'saturday_pickup' => 'setSaturdayPickup',
        'saturday_delivery' => 'setSaturdayDelivery',
        'call_tag_ars' => 'setCallTagArs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'saturday_pickup' => 'getSaturdayPickup',
        'saturday_delivery' => 'getSaturdayDelivery',
        'call_tag_ars' => 'getCallTagArs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['saturday_pickup'] = isset($data['saturday_pickup']) ? $data['saturday_pickup'] : null;
        $this->container['saturday_delivery'] = isset($data['saturday_delivery']) ? $data['saturday_delivery'] : null;
        $this->container['call_tag_ars'] = isset($data['call_tag_ars']) ? $data['call_tag_ars'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['saturday_pickup'] === null) {
            $invalidProperties[] = "'saturday_pickup' can't be null";
        }
        if ($this->container['saturday_delivery'] === null) {
            $invalidProperties[] = "'saturday_delivery' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets saturday_pickup
     *
     * @return string
     */
    public function getSaturdayPickup()
    {
        return $this->container['saturday_pickup'];
    }

    /**
     * Sets saturday_pickup
     *
     * @param string $saturday_pickup A flag indicating if the shipment requires a Saturday pickup. True if tag exists, false otherwise.
     *
     * @return $this
     */
    public function setSaturdayPickup($saturday_pickup)
    {
        $this->container['saturday_pickup'] = $saturday_pickup;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return string
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param string $saturday_delivery A flag indicating if the shipment requires a Saturday Delivery. True if tag exists, false otherwise.
     *
     * @return $this
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets call_tag_ars
     *
     * @return \UPS\QuantumView\QuantumView\ShipmentServiceOptionsCallTagARS
     */
    public function getCallTagArs()
    {
        return $this->container['call_tag_ars'];
    }

    /**
     * Sets call_tag_ars
     *
     * @param \UPS\QuantumView\QuantumView\ShipmentServiceOptionsCallTagARS $call_tag_ars call_tag_ars
     *
     * @return $this
     */
    public function setCallTagArs($call_tag_ars)
    {
        $this->container['call_tag_ars'] = $call_tag_ars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
