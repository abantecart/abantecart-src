<?php
/**
 * LandedCostResponseShipmentPerfStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  UPS\LandedCost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Landed Cost Quote API
 *
 * The Landed Cost Quote API allows you to estimate the all-inclusive cost of international shipments - including applicable duties, VAT, taxes, brokerage fees, and other fees. Required parameters include the currency and shipment details, such as the commodity ID, price, quantity, and country code of origin.  Key Business Values: - **Enhanced Customer Experience**: Get a quick and accurate quote on the landed cost of a shipment, including the cost of goods, transportation, and any other fees associated with getting the goods to their destination. - **Operational Efficiency**: Simplify the process of calculating landed costs by eliminating the need to manually research and calculate all of the different fees involved. - **Data-Driven Decision Making**: Improve decision-making by having a clear understanding of the total cost of shipping goods before you commit to a purchase.. - **Optimizing Cash Flow**: Streamline your shipping process by integrating the Landed Cost Quote API into your existing systems.
 *
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.50
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace UPS\LandedCost\LandedCost;

use \ArrayAccess;
use \UPS\LandedCost\ObjectSerializer;

/**
 * LandedCostResponseShipmentPerfStats Class Doc Comment
 *
 * @category Class
 * @description See ALPerfStats
 * @package  UPS\LandedCost
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandedCostResponseShipmentPerfStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LandedCostResponse_shipment_perfStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'abs_layer_time' => 'string',
        'fulfill_time' => 'string',
        'receipt_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'abs_layer_time' => null,
        'fulfill_time' => null,
        'receipt_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'abs_layer_time' => 'absLayerTime',
        'fulfill_time' => 'fulfillTime',
        'receipt_time' => 'receiptTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'abs_layer_time' => 'setAbsLayerTime',
        'fulfill_time' => 'setFulfillTime',
        'receipt_time' => 'setReceiptTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'abs_layer_time' => 'getAbsLayerTime',
        'fulfill_time' => 'getFulfillTime',
        'receipt_time' => 'getReceiptTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['abs_layer_time'] = isset($data['abs_layer_time']) ? $data['abs_layer_time'] : null;
        $this->container['fulfill_time'] = isset($data['fulfill_time']) ? $data['fulfill_time'] : null;
        $this->container['receipt_time'] = isset($data['receipt_time']) ? $data['receipt_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['abs_layer_time'] === null) {
            $invalidProperties[] = "'abs_layer_time' can't be null";
        }
        if ($this->container['fulfill_time'] === null) {
            $invalidProperties[] = "'fulfill_time' can't be null";
        }
        if ($this->container['receipt_time'] === null) {
            $invalidProperties[] = "'receipt_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets abs_layer_time
     *
     * @return string
     */
    public function getAbsLayerTime()
    {
        return $this->container['abs_layer_time'];
    }

    /**
     * Sets abs_layer_time
     *
     * @param string $abs_layer_time Time taken through the abstraction layer in milliseconds.
     *
     * @return $this
     */
    public function setAbsLayerTime($abs_layer_time)
    {
        $this->container['abs_layer_time'] = $abs_layer_time;

        return $this;
    }

    /**
     * Gets fulfill_time
     *
     * @return string
     */
    public function getFulfillTime()
    {
        return $this->container['fulfill_time'];
    }

    /**
     * Sets fulfill_time
     *
     * @param string $fulfill_time Time taken to complete the request.
     *
     * @return $this
     */
    public function setFulfillTime($fulfill_time)
    {
        $this->container['fulfill_time'] = $fulfill_time;

        return $this;
    }

    /**
     * Gets receipt_time
     *
     * @return string
     */
    public function getReceiptTime()
    {
        return $this->container['receipt_time'];
    }

    /**
     * Sets receipt_time
     *
     * @param string $receipt_time Time taken to receive the request.
     *
     * @return $this
     */
    public function setReceiptTime($receipt_time)
    {
        $this->container['receipt_time'] = $receipt_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
